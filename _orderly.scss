/*----------------------------------------------------------------------*

orderly
v.1.1
https://github.com/thomhines/orderly

created by Thom Hines
MIT License

*----------------------------------------------------------------------*/


// SETTINGS
//----------------------------------------------------------------------

// Grid values
$container_width: 1024px !default;
$total_columns: 12 !default;
$gutter: 0px !default;


// Responsive breakpoints
$xs: 420px !default;
$sm: 568px !default;
$md: 768px !default;
$lg: 1024px !default;
$xl: 1280px !default;

// Enable/disable default breakpoints
// Nutshell: Container becomes fluid below $lg screen size and columns are full width below $md screen size
$auto_break: true !default;

// The size/breakpoint at which the layout should become fluid
$go_to_fluid_breakpoint: $lg !default;

// The size/breakpoint at which the layout should become fluid
$fluid_width: 90% !default;

// At which size/breakpoint should the columns stack on top of one another?
$go_to_single_column_breakpoint: $sm !default;

// Sets direction of text content
$text_direction: 'ltr';

// Show browser width indicator
$width_indicator: false !default;


// HELPER FUNCTIONS
//----------------------------------------------------------------------

// Returns value of breakpoint
@function getBreakpointValue($name, $inclusive: null) {
	@if $name == 'xs' or $name == $xs { 
		@if $inclusive { @return 0; }
		@else { @return $xs; }
	}
	@else if $name == 'sm' or $name == $sm { 
		@if $inclusive { @return $xs; }
		@else { @return $sm; }
	}
	@else if $name == 'md' or $name == $md { 
		@if $inclusive { @return $sm; }
		@else { @return $md; }
	}
	@else if $name == 'lg' or $name == $lg { 
		@if $inclusive { @return $md; }
		@else { @return $lg; }
	}
	@else if $name == 'xl' or $name == $xl { 
		@if $inclusive { @return $lg; }
		@else { @return $xl; }
	}
	@else { @return $name; }
}


// MIXINS
//----------------------------------------------------------------------

// Sets container properties
@mixin container($width: $container_width, $min: null, $max: null) {
	
	margin: auto;

	@if $max {
		@media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max))  {
			width: $width + $gutter;
		}
	} 
	
	@else if $min {
		@media (max-width: getBreakpointValue($min)) {
			width: $width + $gutter;
		}
	} 
	
	@else {
		width: $width + $gutter;
		
		@if $auto_break {
			@if $min == null {
				@media (max-width: $go_to_fluid_breakpoint) {
					width: $fluid_width;
					padding: 0 0 0 $gutter;
				}
			}
		}
		
	}

	// Add clearfix to make sure container holds all floated columns
	&:after {		
		content: "";
		display: table;
		clear: both;
	}
}



// Sets column properties
@mixin column($width: $total_columns, $min: null, $max: null) {

	padding: 0 $gutter 0 0;

	// Change direction of columns based on text direction
	@if $text_direction == 'rtl' { float: right; }
	@else { float: left; }
	
	// Set width of column
	@if $max {
		@media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max)) {
			@if unit($width) == '%' { width: $width; }
			@else if $width >= 1 { width: $width/$total_columns * 100%; }
			@else { width: $width * 100%; }
		}
	} 
	
	@else if $min {
		@media (max-width: getBreakpointValue($min)) {
			@if unit($width) == '%' { width: $width; }
			@else if $width >= 1 { width: $width/$total_columns * 100%; }
			@else { width: $width * 100%; }
		}
	} 
	
	@else {
		@if unit($width) == '%' { width: $width; }
		@else if $width >= 1 { width: $width/$total_columns * 100%; }
		@else { width: $width * 100%; }
		
		@if $auto_break {
			@media screen and (max-width: $go_to_single_column_breakpoint) {
				width: 100%;
			}
		}
	}
}



// Swaps the position of this column with the column that comes after it in your HTML
@mixin swap {
	// This changes depending on the direction of the text
	@if $text_direction == 'rtl' { float: left; }
	@else { float: right; }	
}



// Adds margin to left of column
@mixin push-left($width: 1, $min: null, $max: null) {

	// Set the width of the margin
	// If two breakpoints are given, set min and max widths
	@if $max {
		@media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max)) {
			@if unit($width) == '%' { margin-left: $width; }
			@else if $width >= 1 { margin-left: $width/$total_columns * 100%; }
			@else { margin-left: $width * 100%; }
		}
	} 
	
	// If just one, set only max width 
	@else if $min {
		@media (max-width: getBreakpointValue($min)) {
			@if unit($width) == '%' { margin-left: $width; }
			@else if $width >= 1 { margin-left: $width/$total_columns * 100%; }
			@else { margin-left: $width * 100%; }
		}
	} 
	
	@else {
		@if unit($width) == '%' { margin-left: $width; }
		@else if $width >= 1 { margin-left: $width/$total_columns * 100%; }
		@else { margin-left: $width * 100%; }
		
		@if $auto_break {
			@media (max-width: $go_to_single_column_breakpoint) {
				margin-left: 0;
			}
		}
	}	
}





// Adds margin to right of column
@mixin push-right($width: 1, $min: null, $max: null) {

	// Set the width of the margin
	
	// If two breakpoints are given, set min and max widths
	@if $max {
		@media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max)) {
			@if unit($width) == '%' { margin-right: $width; }
			@else if $width >= 1 { margin-right: $width/$total_columns * 100%; }
			@else { margin-right: $width * 100%; }
		}
	}
	
	// If just one, set only max width 
	@else if $min {
		@media (max-width: getBreakpointValue($min)) {
			@if unit($width) == '%' { margin-right: $width; }
			@else if $width >= 1 { margin-right: $width/$total_columns * 100%; }
			@else { margin-right: $width * 100%; }
		}
	}
	
	@else {
		@if unit($width) == '%' { margin-right: $width; }
		@else if $width >= 1 { margin-right: $width/$total_columns * 100%; }
		@else { margin-right: $width * 100%; }
		
		@if $auto_break {
			@media (max-width: $go_to_single_column_breakpoint) {
				margin-right: 0;
			}
		}
	}	
}



// Encloses columns in a clearfixed wrapper, preventing other columns from sitting on the same line
@mixin row() {
	clear: both;
	&:after {		
		content: "";
		display: table;
		clear: both;
	}
}


// Applies styles at specified breakpoint(s)
@mixin breakpoint($min: null, $max: null) {
	// If two arguments are given:
	@if $max { @media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max)) { @content } }
	// Only one argument (treat as max):
	@else if $min { @media (max-width: getBreakpointValue($min)) { @content } }
	// Otherwise, use at smaller sizes:
	@else { @media (min-width: 0) and (max-width: $go_to_single_column_breakpoint) { @content } }
}


// Hides content below a certain breakpoint
@mixin hide($min: null, $max: null) {
	// If two arguments are given:
	@if $max { @media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max)) { display: none; } }
	// Only one argument (treat as max):
	@else if $min { @media (max-width: getBreakpointValue($min)) { display: none; } }
	// If there are no , hide at small sizes:
	@else { @media (min-width: 0) and (max-width: $go_to_single_column_breakpoint) { display: none; } }
}


// Shows content below a certain breakpoint
@mixin show($min: null, $max: null) {
	// If two arguments are given:
	@if $max { @media (min-width: getBreakpointValue($min, true)) and (max-width: getBreakpointValue($max)) { display: block; } }
	// Only one argument (treat as max):
	@else if $min { @media (max-width: getBreakpointValue($min)) { display: block; } }
	// If there are no, show at small sizes:
	@else { @media (min-width: 0) and (max-width: $go_to_single_column_breakpoint) { display: block; } }
}


// Clearfix mixin, just for fun (based on Nicolas Gallagher's brilliant micro clearfix: http://nicolasgallagher.com/micro-clearfix-hack/)
@mixin clearfix() {
	&:before,
	&:after {
		content: "";
		display: table;
	}
	&:after {
		clear: both;
	}
	& {
		*zoom: 1;
	}
}

// Add indicator to show how wide page is
@mixin width-indicator() {
	body::before {
		position: fixed;
		top: 30px;
		right: 30px;
		width: 40px;
		padding: .4em;
		font-size: 24px;
		text-align: center;
		background: #ff8361;
		color: #fff;
		z-index: 2000;
	
		content: 'XL';

		@include breakpoint($lg) {
			content: 'LG';
		}
		@include breakpoint($md) {
			content: 'MD';
		}
		@include breakpoint($sm) {
			content: 'SM';
			font-size: 16px;
		}
		@include breakpoint($xs) {
			content: 'XS';
			font-size: 12px;
		}
	}
}

@if $width_indicator {
	@include width-indicator();
}




// Use border-box to keep everything lined up
* {-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;}

