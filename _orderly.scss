/*----------------------------------------------------------------------*

	orderly
	v.1.0
	https://github.com/thomhines/orderly

*----------------------------------------------------------------------*/





// SETTINGS
//----------------------------------------------------------------------

// Grid values
$container_width: 1024px !default;
$total_columns: 12 !default;
$gutter: 30px !default;


// Responsive breakpoints
$xs: 420px !default;
$sm: 568px !default;
$md: 768px !default;
$lg: 1024px !default;
$xl: 1280px !default;


// Enable/disable default breakpoints
// Nutshell: Container becomes fluid below $lg screen size and columns are full width below $md screen size
$auto_break: true !default;

// The size/breakpoint at which the layout should become fluid
$go_to_fluid: $lg !default;

// At which size/breakpoint should the columns stack on top of one another?
$go_to_single_column: $sm !default;

// Enable/disable HTML class names
// Nutshell: If you prefer to control your columns from within your SCSS files, disabling this will
// keep your output CSS much smaller
$enable_helper_classes: false !default;



// HELPER FUNCTIONS
//----------------------------------------------------------------------

// Returns value of breakpoint
@function getBreakpointValue($name) {
	@if $name == 'sm' { @return $sm; }
	@else if $name == 'md' { @return $md; }
	@else if $name == 'lg' { @return $lg; }
	@else { @return $xl; }
}

// Returns name of breakpoint
@function getBreakpointName($val) {
	@if $val == $sm { @return 'sm'; }
	@else if $val == $md { @return 'md'; }
	@else if $val == $lg { @return 'lg'; }
	@else { @return 'xl'; }
}




// MIXINS
//----------------------------------------------------------------------

// Sets container properties
@mixin container($width: $container_width, $breakpoint: false) {

	@if $breakpoint {
		@media screen and (max-width: $breakpoint) {
			width: $width + $gutter;
			margin: auto;
		}
	} 
	
	@else {
		width: $width + $gutter;
		margin: auto;
		
		@if $auto_break {
			@if $breakpoint == false {
				@media screen and (max-width: $go_to_fluid) {
					width: 100%;
					padding: 0 0 0 $gutter;
				}
			}
		}
		
	}

	&:after {		
		content: "";
		display: table;
		clear: both;
	}
}


// Sets column properties
@mixin column($width: $total_columns, $breakpoint: false) {
	float: left;
	padding: 0 $gutter 0 0;
	
	@if $breakpoint {
		@media screen and (max-width: getBreakpointValue($breakpoint)) {
			@if $width >= 1 { width: $width/$total_columns * 100%; }
			@else { width: $width * 100%; }
		}
	} 
	
	@else {
		@if $width >= 1 { width: $width/$total_columns * 100%; }
		@else { width: $width * 100%; }
		
		@if $auto_break {
			@media screen and (max-width: $go_to_single_column) {
				width: 100%;
			}
		}
	}
}

// Swaps the position of this column with the column that comes after it in your HTML
@mixin swap {
	float: right;	
}

// Adds margin to left of column
@mixin push-left($width: 1, $breakpoint: false) {

	@if $breakpoint {
		@media screen and (max-width: getBreakpointValue($breakpoint)) {
			@if $width >= 1 { margin-left: $width/$total_columns * 100%; }
			@else { margin-left: $width * 100%; }
		}
	} 
	
	@else {
		@if $width >= 1 { margin-left: $width/$total_columns * 100%; }
		@else { margin-left: $width * 100%; }
		
		@if $auto_break {
			@media screen and (max-width: $go_to_single_column) {
				margin-left: 0;
			}
		}
	}	
}

// Adds margin to right of column
@mixin push-right($width: 1, $breakpoint: false) {

	@if $breakpoint {
		@media screen and (max-width: getBreakpointValue($breakpoint)) {
			@if $width >= 1 { margin-right: $width/$total_columns * 100%; }
			@else { margin-right: $width * 100%; }
		}
	}
	
	@else {
		@if $width >= 1 { margin-right: $width/$total_columns * 100%; }
		@else { margin-right: $width * 100%; }
		
		@if $auto_break {
			@media screen and (max-width: $go_to_single_column) {
				margin-right: 0;
			}
		}
	}	
}

// Encloses columns in a wrapper prevent other columns from sitting on the same line
@mixin row() {
	clear:  both;
	&:after {		
		content: "";
		display: table;
		clear: both;
	}
}


@mixin hide($breakpoint) {
	@media screen and (max-width: getBreakpointValue($breakpoint)) {
		display: none; 
	}
}

@mixin show($breakpoint) {
	@media screen and (max-width: getBreakpointValue($breakpoint)) {
		display: block; 
	}
}


// If helper classes are enabled, load 'em in
@if $enable_helper_classes { @import 'orderly-helper-classes'; }


// Use border-box to keep everything lined up
* {-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;}

