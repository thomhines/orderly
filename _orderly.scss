/*----------------------------------------------------------------------*

orderly
v.1.0
https://github.com/thomhines/orderly

created by Thom Hines
MIT License

*----------------------------------------------------------------------*/


// SETTINGS
//----------------------------------------------------------------------

// Grid values
$container_width: 1024px !default;
$total_columns: 12 !default;
$gutter: 0px !default;


// Responsive breakpoints
$xs: 420px !default;
$sm: 568px !default;
$md: 768px !default;
$lg: 1024px !default;
$xl: 1280px !default;

// Enable/disable default breakpoints
// Nutshell: Container becomes fluid below $lg screen size and columns are full width below $md screen size
$auto_break: true !default;

// The size/breakpoint at which the layout should become fluid
$go_to_fluid_breakpoint: $lg !default;

// The size/breakpoint at which the layout should become fluid
$fluid_width: 90% !default;

// At which size/breakpoint should the columns stack on top of one another?
$go_to_single_column_breakpoint: $sm !default;

// Sets direction of text content
$text_direction: 'ltr';


// HELPER FUNCTIONS
//----------------------------------------------------------------------

// Returns value of breakpoint
@function getBreakpointValue($name) {
	@if $name == 'xs' { @return $xs; }
	@else if $name == 'sm' { @return $sm; }
	@else if $name == 'md' { @return $md; }
	@else if $name == 'lg' { @return $lg; }
	@else if $name == 'xl' { @return $xl; }
	@else { @return $name; }
}



// MIXINS
//----------------------------------------------------------------------

// Sets container properties
@mixin container($width: $container_width, $breakpoint: false) {

	@if $breakpoint {
		@media (max-width: getBreakpointValue($breakpoint)) {
			width: $width + $gutter;
			margin: auto;
		}
	} 
	
	@else {
		width: $width + $gutter;
		margin: auto;
		
		@if $auto_break {
			@if $breakpoint == false {
				@media (max-width: $go_to_fluid_breakpoint) {
					width: $fluid_width;
					padding: 0 0 0 $gutter;
				}
			}
		}
		
	}

	// Add clearfix to make sure container holds all floated columns
	&:after {		
		content: "";
		display: table;
		clear: both;
	}
}



// Sets column properties
@mixin column($width: $total_columns, $breakpoint: false) {

	padding: 0 $gutter 0 0;

	// Change direction of columns based on text direction
	@if $text_direction == 'rtl' { float: right; }
	@else { float: left; }
	
	// Set width of column
	@if $breakpoint {
		@media (max-width: getBreakpointValue($breakpoint)) {
			@if unit($width) == '%' { width: $width; }
			@else if $width >= 1 { width: $width/$total_columns * 100%; }
			@else { width: $width * 100%; }
		}
	} @else {
		@if unit($width) == '%' { width: $width; }
		@else if $width >= 1 { width: $width/$total_columns * 100%; }
		@else { width: $width * 100%; }
		
		@if $auto_break {
			@media screen and (max-width: $go_to_single_column_breakpoint) {
				width: 100%;
			}
		}
	}
}



// Swaps the position of this column with the column that comes after it in your HTML
@mixin swap {
	// This changes depending on the direction of the text
	@if $text_direction == 'rtl' { float: left; }
	@else { float: right; }	
}



// Adds margin to left of column
@mixin push-left($width: 1, $breakpoint: false) {

	// Set the width of the margin
	@if $breakpoint {
		@media (max-width: getBreakpointValue($breakpoint)) {
			@if unit($width) == '%' { margin-left: $width; }
			@else if $width >= 1 { margin-left: $width/$total_columns * 100%; }
			@else { margin-left: $width * 100%; }
		}
	} 
	
	@else {
		@if unit($width) == '%' { margin-left: $width; }
		@else if $width >= 1 { margin-left: $width/$total_columns * 100%; }
		@else { margin-left: $width * 100%; }
		
		@if $auto_break {
			@media (max-width: $go_to_single_column_breakpoint) {
				margin-left: 0;
			}
		}
	}	
}



// Adds margin to right of column
@mixin push-right($width: 1, $breakpoint: false) {

	// Set the width of the margin
	@if $breakpoint {
		@media (max-width: getBreakpointValue($breakpoint)) {
			@if unit($width) == '%' { margin-right: $width; }
			@else if $width >= 1 { margin-right: $width/$total_columns * 100%; }
			@else { margin-right: $width * 100%; }
		}
	}
	
	@else {
		@if unit($width) == '%' { margin-right: $width; }
		@else if $width >= 1 { margin-right: $width/$total_columns * 100%; }
		@else { margin-right: $width * 100%; }
		
		@if $auto_break {
			@media (max-width: $go_to_single_column_breakpoint) {
				margin-right: 0;
			}
		}
	}	
}



// Encloses columns in a clearfixed wrapper, preventing other columns from sitting on the same line
@mixin row() {
	clear: both;
	&:after {		
		content: "";
		display: table;
		clear: both;
	}
}


// Applies styles at specified breakpoint(s)
@mixin breakpoint($min: $md, $max: false) {
	// If two arguments are given:
	@if $min and $max { @media (min-width: $min) and (max-width: $max) { @content } }
	// Only max:
	@else if $max { @media (max-width: $max) { @content } }
	// Else, only min:
	@else { @media (min-width: $min) { @content } }
}


// Hides content below a certain breakpoint
@mixin hide($breakpoint: $go_to_single_column_breakpoint) {
	@media (max-width: getBreakpointValue($breakpoint)) {
		display: none; 
	}
}



// Shows content below a certain breakpoint
@mixin show($breakpoint: $go_to_single_column_breakpoint) {
	@media (max-width: getBreakpointValue($breakpoint)) {
		display: block; 
	}
}



// Use border-box to keep everything lined up
* {-moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box;}

